From ae60797474d3f0d8db6c89a7166561d922550d89 Mon Sep 17 00:00:00 2001
From: James Williams <jameswilliams@catalyst-au.net>
Date: Fri, 30 Jun 2023 22:58:46 +1000
Subject: [PATCH] MDL-76126 course: Add four callbacks for course forms like
 MDL-52534.

This adds the following callbacks for plugin use with courses:

- course_edit_post_actions
- course_standard_elements
- course_definition_after_data
- course_validation

This also adds an additional get_course() getter to the course_edit_form
class, to mimic the same functionality in an otherwise cut-down class by
comparison.
---
 course/edit_form.php | 67 ++++++++++++++++++++++++++++++++++++++++++++
 course/lib.php       | 21 ++++++++++++++
 2 files changed, 88 insertions(+)

diff --git a/course/edit_form.php b/course/edit_form.php
index d0b50f3ab79..271a0624eb7 100644
--- a/course/edit_form.php
+++ b/course/edit_form.php
@@ -13,6 +13,14 @@ class course_edit_form extends moodleform {
     protected $course;
     protected $context;
 
+    /**
+     * Get the course.
+     * @return course
+     */
+    public function get_course() {
+        return $this->course;
+    }
+
     /**
      * Form definition.
      */
@@ -387,6 +395,9 @@ class course_edit_form extends moodleform {
         $handler->set_parent_context($categorycontext); // For course handler only.
         $handler->instance_form_definition($mform, empty($course->id) ? 0 : $course->id);
 
+        // Apply any plugin extensions to this course.
+        $this->plugin_extend_course_standard_elements();
+
         // Add communication plugins to the form.
         if (core_communication\api::is_available()) {
 
@@ -426,10 +437,23 @@ class course_edit_form extends moodleform {
 
         // Prepare custom fields data.
         $handler->instance_form_before_set_data($course);
+
         // Finally set the current form data
         $this->set_data($course);
     }
 
+    /**
+     * Plugins can extend the course settings form.
+     */
+    protected function plugin_extend_course_standard_elements() {
+        $callbacks = get_plugins_with_function('course_standard_elements', 'lib.php');
+        foreach ($callbacks as $type => $plugins) {
+            foreach ($plugins as $plugin => $pluginfunction) {
+                $pluginfunction($this, $this->_form);
+            }
+        }
+    }
+
     /**
      * Fill in the current page data for this course.
      */
@@ -489,6 +513,21 @@ class course_edit_form extends moodleform {
             );
             $communication->form_definition_for_provider($mform);
         }
+
+        // Apply any plugin extensions to this course.
+        $this->plugin_extend_course_definition_after_data();
+    }
+
+    /**
+     * Plugins can extend the course settings form after the data is set.
+     */
+    protected function plugin_extend_course_definition_after_data() {
+        $callbacks = get_plugins_with_function('course_definition_after_data', 'lib.php');
+        foreach ($callbacks as $type => $plugins) {
+            foreach ($plugins as $plugin => $pluginfunction) {
+                $pluginfunction($this, $this->_form);
+            }
+        }
     }
 
     /**
@@ -535,6 +574,34 @@ class course_edit_form extends moodleform {
         $handler = core_course\customfield\course_handler::create();
         $errors  = array_merge($errors, $handler->instance_form_validation($data, $files));
 
+        // Allow plugins to extend the course fields validation.
+        $pluginerrors = $this->plugin_extend_course_validation($data);
+        if (!empty($pluginerrors)) {
+            $errors = array_merge($errors, $pluginerrors);
+        }
+
+        return $errors;
+    }
+
+    /**
+     * Extend the validation function from any other plugin.
+     *
+     * @param stdClass $data The form data.
+     * @return array $errors The list of errors keyed by element name.
+     */
+    protected function plugin_extend_course_validation($data) {
+        $errors = array();
+
+        $callbacks = get_plugins_with_function('course_validation', 'lib.php');
+        foreach ($callbacks as $type => $plugins) {
+            foreach ($plugins as $plugin => $pluginfunction) {
+                // We have exposed all the important properties with public getters - the errors array should be pass by reference.
+                $pluginerrors = $pluginfunction($this, $data);
+                if (!empty($pluginerrors)) {
+                    $errors = array_merge($errors, $pluginerrors);
+                }
+            }
+        }
         return $errors;
     }
 }
diff --git a/course/lib.php b/course/lib.php
index 89b3c638997..407bf5f35c0 100644
--- a/course/lib.php
+++ b/course/lib.php
@@ -2516,6 +2516,9 @@ function update_course($data, $editoroptions = NULL) {
     $handler = core_course\customfield\course_handler::create();
     $handler->instance_form_save($data);
 
+    // Allow plugins to extend the course data/oldcourse and handle form data.
+    $data = plugin_extend_course_edit_post_actions($data, $oldcourse);
+
     // Update with the new data
     $DB->update_record('course', $data);
     // make sure the modinfo cache is reset
@@ -2578,6 +2581,24 @@ function update_course($data, $editoroptions = NULL) {
     }
 }
 
+/**
+ * Hook for plugins to take action when a course is created or updated.
+ *
+ * @param stdClass $data the module info
+ * @param stdClass $oldcourse the previous course object source data
+ *
+ * @return stdClass data updated by plugins.
+ */
+function plugin_extend_course_edit_post_actions($data, $oldcourse) {
+    $callbacks = get_plugins_with_function('course_edit_post_actions', 'lib.php');
+    foreach ($callbacks as $type => $plugins) {
+        foreach ($plugins as $plugin => $pluginfunction) {
+            $data = $pluginfunction($data, $oldcourse);
+        }
+    }
+    return $data;
+}
+
 /**
  * Calculate the average number of enrolled participants per course.
  *
-- 
2.34.1

